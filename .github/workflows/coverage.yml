name: Code Coverage

on:
  push:
    branches: [ main, phase-* ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build g++ libgtest-dev libgmock-dev libasio-dev libfmt-dev lcov

    - name: Configure CMake with coverage
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DBUILD_WITH_COMMON_SYSTEM=OFF \
          -DBUILD_WITH_LOGGER_SYSTEM=OFF \
          -DBUILD_WITH_THREAD_SYSTEM=OFF \
          -DBUILD_WITH_CONTAINER_SYSTEM=OFF \
          -DBUILD_MESSAGING_BRIDGE=OFF \
          -DBUILD_TESTS=ON \
          -DBUILD_SAMPLES=OFF

    - name: Build with coverage
      run: cmake --build build --config Debug

    - name: Run tests
      run: |
        cd build
        ctest -C Debug --output-on-failure --verbose || true

    - name: Generate coverage report
      run: |
        cd build
        # Create coverage directory
        mkdir -p coverage

        # Capture coverage data (ignore gcov mismatches from external dependencies)
        # Set environment variable to pass ignore-errors to geninfo
        export GENINFO_OPTS="--ignore-errors mismatch,gcov,source,unused"
        lcov --directory . --capture --output-file coverage.info \
          --ignore-errors mismatch,gcov,source,unused \
          --rc geninfo_gcov_all_blocks=0 || true

        # Filter out system headers, test files, and external dependencies (FetchContent)
        lcov --remove coverage.info \
          '/usr/*' \
          '*/test/*' \
          '*/tests/*' \
          '*/examples/*' \
          '*/build/_deps/*' \
          '*/googletest/*' \
          '*/asio/*' \
          --output-file coverage_filtered.info \
          --ignore-errors unused,mismatch || true

        # Generate HTML report
        genhtml coverage_filtered.info --output-directory coverage_html \
          --ignore-errors source,unmapped || true

        # Print summary
        lcov --list coverage_filtered.info --ignore-errors unused || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./build/coverage_filtered.info
        flags: unittests
        name: network_system-coverage
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          build/coverage.info
          build/coverage_filtered.info
          build/coverage_html/
        retention-days: 7

    - name: Coverage summary
      if: always()
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f build/coverage_filtered.info ]; then
          echo "Coverage data collected successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Phase 0 Target: Establish baseline coverage" >> $GITHUB_STEP_SUMMARY
          echo "Phase 5 Target: 80%+ coverage" >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage data generated." >> $GITHUB_STEP_SUMMARY
        fi
